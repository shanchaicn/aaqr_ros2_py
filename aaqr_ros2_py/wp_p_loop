#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from rclpy.executors import SingleThreadedExecutor
from threading import Thread, Lock
from time import sleep

from sensor_msgs.msg import BatteryState
from geometry_msgs.msg import PoseStamped, PointStamped
from turtlebot4_navigation.turtlebot4_navigator import TurtleBot4Directions, TurtleBot4Navigator

BATTERY_HIGH = 0.95
BATTERY_LOW = 0.2  # when the robot will go charge
BATTERY_CRITICAL = 0.1  # when the robot will shutdown

class BatteryMonitor(Node):
    def __init__(self, lock):
        super().__init__('battery_monitor')
        self.lock = lock
        self.battery_state_subscriber = self.create_subscription(
            BatteryState,
            'battery_state',
            self.battery_state_callback,
            10)
        self.position_subscriber = self.create_subscription(
            PointStamped,
            'turtlebot4_position',
            self.position_callback,
            10)
        self.battery_percent = None
        self.current_position = None

    def battery_state_callback(self, batt_msg: BatteryState):
        with self.lock:
            self.battery_percent = batt_msg.percentage

    def position_callback(self, position_msg: PointStamped):
        with self.lock:
            self.current_position = position_msg

    def thread_function(self):
        executor = SingleThreadedExecutor()
        executor.add_node(self)
        executor.spin()

def save_pose(position):
    if position is not None:
        print(f"Saving position: x={position.point.x}, y={position.point.y}, z={position.point.z}")

def main(args=None):
    rclpy.init(args=args)

    lock = Lock()
    battery_monitor = BatteryMonitor(lock)
    navigator = TurtleBot4Navigator()
    battery_percent = None

    thread = Thread(target=battery_monitor.thread_function, daemon=True)
    thread.start()

    # Start on dock
    if not navigator.getDockedStatus():
        navigator.info('Docking before initializing pose')
        navigator.dock()

    # Set initial pose
    initial_pose = navigator.getPoseStamped([0.0, 0.0], TurtleBot4Directions.NORTH)
    navigator.setInitialPose(initial_pose)

    # Wait for Nav2
    navigator.waitUntilNav2Active()

    # Undock
    navigator.undock()

    # Prepare goal poses
    goal_poses = [
        navigator.getPoseStamped([-5.0, 1.0], TurtleBot4Directions.EAST),
        navigator.getPoseStamped([-5.0, -23.0], TurtleBot4Directions.NORTH),
        navigator.getPoseStamped([9.0, -23.0], TurtleBot4Directions.NORTH_WEST),
        navigator.getPoseStamped([10.0, 2.0], TurtleBot4Directions.WEST)
    ]

    position_index = 0
    while True:
        with lock:
            battery_percent = battery_monitor.battery_percent
            current_position = battery_monitor.current_position

        if battery_percent is not None:
            navigator.info(f'Battery is at {(battery_percent*100):.2f}% charge')

            if battery_percent < BATTERY_CRITICAL:
                navigator.error('Battery critically low. Charge or power down')
                break
            elif battery_percent < BATTERY_LOW:
                navigator.info('Docking for charge')
                navigator.startToPose(navigator.getPoseStamped([-1.0, 1.0], TurtleBot4Directions.EAST))
                navigator.dock()
                # Wait until charged
                navigator.info('Charging...')
                while battery_percent < BATTERY_HIGH:
                    sleep(15)
                    with lock:
                        battery_percent = battery_monitor.battery_percent
                navigator.undock()
                position_index = 0
            else:
                navigator.startToPose(goal_poses[position_index])
                navigator.waitUntilTaskComplete()
                save_pose(current_position)
                position_index = (position_index + 1) % len(goal_poses)

    battery_monitor.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
